// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predictCov
 *
 * Args:
 *     dt: Scalar
 *     input_var: Scalar
 *     bias_var: Scalar
 *     acc_var: Scalar
 *     covariance: Matrix44
 *
 * Outputs:
 *     cov_updated: Matrix44
 */
template <typename Scalar>
void Predictcov(const Scalar dt, const Scalar input_var, const Scalar bias_var,
                const Scalar acc_var, const Eigen::Matrix<Scalar, 4, 4>& covariance,
                Eigen::Matrix<Scalar, 4, 4>* const cov_updated = nullptr) {
  // Total ops: 60

  // Input arrays

  // Intermediate terms (10)
  const Scalar _tmp0 = std::pow(dt, Scalar(2));
  const Scalar _tmp1 = Scalar(0.5) * _tmp0;
  const Scalar _tmp2 = _tmp1 * covariance(3, 3);
  const Scalar _tmp3 = _tmp2 + covariance(0, 3) + covariance(1, 3) * dt;
  const Scalar _tmp4 = _tmp1 * covariance(3, 1) + covariance(0, 1) + covariance(1, 1) * dt;
  const Scalar _tmp5 = covariance(3, 1) * dt;
  const Scalar _tmp6 = _tmp5 + covariance(1, 1);
  const Scalar _tmp7 = covariance(3, 3) * dt;
  const Scalar _tmp8 = _tmp7 + covariance(1, 3);
  const Scalar _tmp9 = Scalar(0.5) * [&]() {
    const Scalar base = dt;
    return base * base * base;
  }() * input_var;

  // Output terms (1)
  if (cov_updated != nullptr) {
    Eigen::Matrix<Scalar, 4, 4>& _cov_updated = (*cov_updated);

    _cov_updated(0, 0) = _tmp1 * _tmp3 + _tmp1 * covariance(3, 0) + _tmp4 * dt + covariance(0, 0) +
                         covariance(1, 0) * dt + Scalar(0.25) * std::pow(dt, Scalar(4)) * input_var;
    _cov_updated(1, 0) =
        _tmp1 * _tmp8 + _tmp6 * dt + _tmp9 + covariance(1, 0) + covariance(3, 0) * dt;
    _cov_updated(2, 0) = _tmp1 * covariance(2, 3) + covariance(2, 0) + covariance(2, 1) * dt;
    _cov_updated(3, 0) = _tmp2 + _tmp5 + covariance(3, 0);
    _cov_updated(0, 1) = _tmp3 * dt + _tmp4 + _tmp9;
    _cov_updated(1, 1) = _tmp0 * input_var + _tmp6 + _tmp8 * dt;
    _cov_updated(2, 1) = covariance(2, 1) + covariance(2, 3) * dt;
    _cov_updated(3, 1) = _tmp7 + covariance(3, 1);
    _cov_updated(0, 2) = _tmp1 * covariance(3, 2) + covariance(0, 2) + covariance(1, 2) * dt;
    _cov_updated(1, 2) = covariance(1, 2) + covariance(3, 2) * dt;
    _cov_updated(2, 2) = bias_var + covariance(2, 2);
    _cov_updated(3, 2) = covariance(3, 2);
    _cov_updated(0, 3) = _tmp3;
    _cov_updated(1, 3) = _tmp8;
    _cov_updated(2, 3) = covariance(2, 3);
    _cov_updated(3, 3) = acc_var + covariance(3, 3);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
