// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym
{

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: syncState
 *
 * Args:
 *     dt: Scalar
 *     state: Matrix91
 *     acc: Matrix31
 *
 * Outputs:
 *     state_updated: Matrix91
 */
template <typename Scalar>
void Syncstate(const Scalar dt, const matrix::Matrix<Scalar, 9, 1> &state,
	       const matrix::Matrix<Scalar, 3, 1> &acc,
	       matrix::Matrix<Scalar, 9, 1> *const state_updated = nullptr)
{
	// Total ops: 20

	// Input arrays

	// Intermediate terms (1)
	const Scalar _tmp0 = Scalar(0.5) * std::pow(dt, Scalar(2));

	// Output terms (1)
	if (state_updated != nullptr) {
		matrix::Matrix<Scalar, 9, 1> &_state_updated = (*state_updated);

		_state_updated(0, 0) = -_tmp0 * acc(0, 0) - dt * state(3, 0) + state(0, 0);
		_state_updated(1, 0) = -_tmp0 * acc(1, 0) - dt * state(4, 0) + state(1, 0);
		_state_updated(2, 0) = -_tmp0 * acc(2, 0) - dt * state(5, 0) + state(2, 0);
		_state_updated(3, 0) = acc(0, 0) * dt + state(3, 0);
		_state_updated(4, 0) = acc(1, 0) * dt + state(4, 0);
		_state_updated(5, 0) = acc(2, 0) * dt + state(5, 0);
		_state_updated(6, 0) = state(6, 0);
		_state_updated(7, 0) = state(7, 0);
		_state_updated(8, 0) = state(8, 0);
	}
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
