// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <matrix/math.hpp>

namespace sym
{

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predictCov
 *
 * Args:
 *     dt: Scalar
 *     input_var: Matrix33
 *     bias_var: Matrix33
 *     covariance: Matrix99
 *
 * Outputs:
 *     cov_updated: Matrix99
 */
template <typename Scalar>
void Predictcov(const Scalar dt, const matrix::Matrix<Scalar, 3, 3> &input_var,
		const matrix::Matrix<Scalar, 3, 3> &bias_var,
		const matrix::Matrix<Scalar, 9, 9> &covariance,
		matrix::Matrix<Scalar, 9, 9> *const cov_updated = nullptr)
{
	// Total ops: 170

	// Input arrays

	// Intermediate terms (30)
	const Scalar _tmp0 = covariance(3, 3) * dt;
	const Scalar _tmp1 = _tmp0 + covariance(0, 3);
	const Scalar _tmp2 = Scalar(0.25) * std::pow(dt, Scalar(4));
	const Scalar _tmp3 = covariance(4, 3) * dt;
	const Scalar _tmp4 = _tmp3 + covariance(1, 3);
	const Scalar _tmp5 = covariance(5, 3) * dt;
	const Scalar _tmp6 = _tmp5 + covariance(2, 3);
	const Scalar _tmp7 = Scalar(0.5) * [&]() {
		const Scalar base = dt;
		return base * base * base;
	}();
	const Scalar _tmp8 = _tmp7 * input_var(0, 0);
	const Scalar _tmp9 = _tmp7 * input_var(1, 0);
	const Scalar _tmp10 = _tmp7 * input_var(2, 0);
	const Scalar _tmp11 = covariance(3, 4) * dt;
	const Scalar _tmp12 = _tmp11 + covariance(0, 4);
	const Scalar _tmp13 = covariance(4, 4) * dt;
	const Scalar _tmp14 = _tmp13 + covariance(1, 4);
	const Scalar _tmp15 = covariance(5, 4) * dt;
	const Scalar _tmp16 = _tmp15 + covariance(2, 4);
	const Scalar _tmp17 = _tmp7 * input_var(0, 1);
	const Scalar _tmp18 = _tmp7 * input_var(1, 1);
	const Scalar _tmp19 = _tmp7 * input_var(2, 1);
	const Scalar _tmp20 = covariance(3, 5) * dt;
	const Scalar _tmp21 = _tmp20 + covariance(0, 5);
	const Scalar _tmp22 = covariance(4, 5) * dt;
	const Scalar _tmp23 = _tmp22 + covariance(1, 5);
	const Scalar _tmp24 = covariance(5, 5) * dt;
	const Scalar _tmp25 = _tmp24 + covariance(2, 5);
	const Scalar _tmp26 = _tmp7 * input_var(0, 2);
	const Scalar _tmp27 = _tmp7 * input_var(1, 2);
	const Scalar _tmp28 = _tmp7 * input_var(2, 2);
	const Scalar _tmp29 = std::pow(dt, Scalar(2));

	// Output terms (1)
	if (cov_updated != nullptr) {
		matrix::Matrix<Scalar, 9, 9> &_cov_updated = (*cov_updated);

		_cov_updated(0, 0) =
			_tmp1 * dt + _tmp2 * input_var(0, 0) + covariance(0, 0) + covariance(3, 0) * dt;
		_cov_updated(1, 0) =
			_tmp2 * input_var(1, 0) + _tmp4 * dt + covariance(1, 0) + covariance(4, 0) * dt;
		_cov_updated(2, 0) =
			_tmp2 * input_var(2, 0) + _tmp6 * dt + covariance(2, 0) + covariance(5, 0) * dt;
		_cov_updated(3, 0) = _tmp0 + _tmp8 + covariance(3, 0);
		_cov_updated(4, 0) = _tmp3 + _tmp9 + covariance(4, 0);
		_cov_updated(5, 0) = _tmp10 + _tmp5 + covariance(5, 0);
		_cov_updated(6, 0) = covariance(6, 0) + covariance(6, 3) * dt;
		_cov_updated(7, 0) = covariance(7, 0) + covariance(7, 3) * dt;
		_cov_updated(8, 0) = covariance(8, 0) + covariance(8, 3) * dt;
		_cov_updated(0, 1) =
			_tmp12 * dt + _tmp2 * input_var(0, 1) + covariance(0, 1) + covariance(3, 1) * dt;
		_cov_updated(1, 1) =
			_tmp14 * dt + _tmp2 * input_var(1, 1) + covariance(1, 1) + covariance(4, 1) * dt;
		_cov_updated(2, 1) =
			_tmp16 * dt + _tmp2 * input_var(2, 1) + covariance(2, 1) + covariance(5, 1) * dt;
		_cov_updated(3, 1) = _tmp11 + _tmp17 + covariance(3, 1);
		_cov_updated(4, 1) = _tmp13 + _tmp18 + covariance(4, 1);
		_cov_updated(5, 1) = _tmp15 + _tmp19 + covariance(5, 1);
		_cov_updated(6, 1) = covariance(6, 1) + covariance(6, 4) * dt;
		_cov_updated(7, 1) = covariance(7, 1) + covariance(7, 4) * dt;
		_cov_updated(8, 1) = covariance(8, 1) + covariance(8, 4) * dt;
		_cov_updated(0, 2) =
			_tmp2 * input_var(0, 2) + _tmp21 * dt + covariance(0, 2) + covariance(3, 2) * dt;
		_cov_updated(1, 2) =
			_tmp2 * input_var(1, 2) + _tmp23 * dt + covariance(1, 2) + covariance(4, 2) * dt;
		_cov_updated(2, 2) = _tmp2 * input_var(2, 2) + _tmp25 * dt + bias_var(0, 0) + covariance(2, 2) +
				     covariance(5, 2) * dt;
		_cov_updated(3, 2) = _tmp20 + _tmp26 + covariance(3, 2);
		_cov_updated(4, 2) = _tmp22 + _tmp27 + covariance(4, 2);
		_cov_updated(5, 2) = _tmp24 + _tmp28 + covariance(5, 2);
		_cov_updated(6, 2) = covariance(6, 2) + covariance(6, 5) * dt;
		_cov_updated(7, 2) = covariance(7, 2) + covariance(7, 5) * dt;
		_cov_updated(8, 2) = covariance(8, 2) + covariance(8, 5) * dt;
		_cov_updated(0, 3) = _tmp1 + _tmp8;
		_cov_updated(1, 3) = _tmp4 + _tmp9;
		_cov_updated(2, 3) = _tmp10 + _tmp6;
		_cov_updated(3, 3) = _tmp29 * input_var(0, 0) + covariance(3, 3);
		_cov_updated(4, 3) = _tmp29 * input_var(1, 0) + covariance(4, 3);
		_cov_updated(5, 3) = _tmp29 * input_var(2, 0) + covariance(5, 3);
		_cov_updated(6, 3) = covariance(6, 3);
		_cov_updated(7, 3) = covariance(7, 3);
		_cov_updated(8, 3) = covariance(8, 3);
		_cov_updated(0, 4) = _tmp12 + _tmp17;
		_cov_updated(1, 4) = _tmp14 + _tmp18;
		_cov_updated(2, 4) = _tmp16 + _tmp19;
		_cov_updated(3, 4) = _tmp29 * input_var(0, 1) + covariance(3, 4);
		_cov_updated(4, 4) = _tmp29 * input_var(1, 1) + covariance(4, 4);
		_cov_updated(5, 4) = _tmp29 * input_var(2, 1) + covariance(5, 4);
		_cov_updated(6, 4) = covariance(6, 4);
		_cov_updated(7, 4) = covariance(7, 4);
		_cov_updated(8, 4) = covariance(8, 4);
		_cov_updated(0, 5) = _tmp21 + _tmp26;
		_cov_updated(1, 5) = _tmp23 + _tmp27;
		_cov_updated(2, 5) = _tmp25 + _tmp28;
		_cov_updated(3, 5) = _tmp29 * input_var(0, 2) + covariance(3, 5);
		_cov_updated(4, 5) = _tmp29 * input_var(1, 2) + covariance(4, 5);
		_cov_updated(5, 5) = _tmp29 * input_var(2, 2) + bias_var(1, 1) + covariance(5, 5);
		_cov_updated(6, 5) = covariance(6, 5);
		_cov_updated(7, 5) = covariance(7, 5);
		_cov_updated(8, 5) = covariance(8, 5);
		_cov_updated(0, 6) = covariance(0, 6) + covariance(3, 6) * dt;
		_cov_updated(1, 6) = covariance(1, 6) + covariance(4, 6) * dt;
		_cov_updated(2, 6) = covariance(2, 6) + covariance(5, 6) * dt;
		_cov_updated(3, 6) = covariance(3, 6);
		_cov_updated(4, 6) = covariance(4, 6);
		_cov_updated(5, 6) = covariance(5, 6);
		_cov_updated(6, 6) = covariance(6, 6);
		_cov_updated(7, 6) = covariance(7, 6);
		_cov_updated(8, 6) = covariance(8, 6);
		_cov_updated(0, 7) = covariance(0, 7) + covariance(3, 7) * dt;
		_cov_updated(1, 7) = covariance(1, 7) + covariance(4, 7) * dt;
		_cov_updated(2, 7) = covariance(2, 7) + covariance(5, 7) * dt;
		_cov_updated(3, 7) = covariance(3, 7);
		_cov_updated(4, 7) = covariance(4, 7);
		_cov_updated(5, 7) = covariance(5, 7);
		_cov_updated(6, 7) = covariance(6, 7);
		_cov_updated(7, 7) = covariance(7, 7);
		_cov_updated(8, 7) = covariance(8, 7);
		_cov_updated(0, 8) = covariance(0, 8) + covariance(3, 8) * dt;
		_cov_updated(1, 8) = covariance(1, 8) + covariance(4, 8) * dt;
		_cov_updated(2, 8) = covariance(2, 8) + covariance(5, 8) * dt;
		_cov_updated(3, 8) = covariance(3, 8);
		_cov_updated(4, 8) = covariance(4, 8);
		_cov_updated(5, 8) = covariance(5, 8);
		_cov_updated(6, 8) = covariance(6, 8);
		_cov_updated(7, 8) = covariance(7, 8);
		_cov_updated(8, 8) = bias_var(2, 2) + covariance(8, 8);
	}
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
