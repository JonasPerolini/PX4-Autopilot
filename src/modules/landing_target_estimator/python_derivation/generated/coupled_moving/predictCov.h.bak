// -----------------------------------------------------------------------------
// This file was autogenerated by symforce from template:
//     function/FUNCTION.h.jinja
// Do NOT modify by hand.
// -----------------------------------------------------------------------------

#pragma once

#include <Eigen/Dense>

namespace sym {

/**
 * This function was autogenerated from a symbolic function. Do not modify by hand.
 *
 * Symbolic function: predictCov
 *
 * Args:
 *     dt: Scalar
 *     input_var: Matrix33
 *     bias_var: Matrix33
 *     acc_var: Matrix33
 *     covariance: Matrix12_12
 *
 * Outputs:
 *     cov_updated: Matrix12_12
 */
template <typename Scalar>
void Predictcov(const Scalar dt, const Eigen::Matrix<Scalar, 3, 3>& input_var,
                const Eigen::Matrix<Scalar, 3, 3>& bias_var,
                const Eigen::Matrix<Scalar, 3, 3>& acc_var,
                const Eigen::Matrix<Scalar, 12, 12>& covariance,
                Eigen::Matrix<Scalar, 12, 12>* const cov_updated = nullptr) {
  // Total ops: 480

  // Input arrays

  // Intermediate terms (76)
  const Scalar _tmp0 = std::pow(dt, Scalar(2));
  const Scalar _tmp1 = Scalar(0.5) * _tmp0;
  const Scalar _tmp2 = _tmp1 * covariance(9, 3) + covariance(0, 3) + covariance(3, 3) * dt;
  const Scalar _tmp3 = _tmp1 * covariance(9, 9);
  const Scalar _tmp4 = _tmp3 + covariance(0, 9) + covariance(3, 9) * dt;
  const Scalar _tmp5 = Scalar(0.25) * std::pow(dt, Scalar(4));
  const Scalar _tmp6 = _tmp1 * covariance(10, 3) + covariance(1, 3) + covariance(4, 3) * dt;
  const Scalar _tmp7 = _tmp1 * covariance(10, 9);
  const Scalar _tmp8 = _tmp7 + covariance(1, 9) + covariance(4, 9) * dt;
  const Scalar _tmp9 = _tmp1 * covariance(11, 3) + covariance(2, 3) + covariance(5, 3) * dt;
  const Scalar _tmp10 = _tmp1 * covariance(11, 9);
  const Scalar _tmp11 = _tmp10 + covariance(2, 9) + covariance(5, 9) * dt;
  const Scalar _tmp12 = covariance(9, 9) * dt;
  const Scalar _tmp13 = _tmp12 + covariance(3, 9);
  const Scalar _tmp14 = covariance(9, 3) * dt;
  const Scalar _tmp15 = _tmp14 + covariance(3, 3);
  const Scalar _tmp16 = Scalar(0.5) * [&]() {
    const Scalar base = dt;
    return base * base * base;
  }();
  const Scalar _tmp17 = _tmp16 * input_var(0, 0);
  const Scalar _tmp18 = _tmp16 * input_var(1, 0);
  const Scalar _tmp19 = covariance(10, 3) * dt;
  const Scalar _tmp20 = _tmp19 + covariance(4, 3);
  const Scalar _tmp21 = covariance(10, 9) * dt;
  const Scalar _tmp22 = _tmp21 + covariance(4, 9);
  const Scalar _tmp23 = _tmp16 * input_var(2, 0);
  const Scalar _tmp24 = covariance(11, 9) * dt;
  const Scalar _tmp25 = _tmp24 + covariance(5, 9);
  const Scalar _tmp26 = covariance(11, 3) * dt;
  const Scalar _tmp27 = _tmp26 + covariance(5, 3);
  const Scalar _tmp28 = _tmp1 * covariance(9, 10);
  const Scalar _tmp29 = _tmp28 + covariance(0, 10) + covariance(3, 10) * dt;
  const Scalar _tmp30 = _tmp1 * covariance(9, 4) + covariance(0, 4) + covariance(3, 4) * dt;
  const Scalar _tmp31 = _tmp1 * covariance(10, 10);
  const Scalar _tmp32 = _tmp31 + covariance(1, 10) + covariance(4, 10) * dt;
  const Scalar _tmp33 = _tmp1 * covariance(10, 4) + covariance(1, 4) + covariance(4, 4) * dt;
  const Scalar _tmp34 = _tmp1 * covariance(11, 10);
  const Scalar _tmp35 = _tmp34 + covariance(2, 10) + covariance(5, 10) * dt;
  const Scalar _tmp36 = _tmp1 * covariance(11, 4) + covariance(2, 4) + covariance(5, 4) * dt;
  const Scalar _tmp37 = covariance(9, 4) * dt;
  const Scalar _tmp38 = _tmp37 + covariance(3, 4);
  const Scalar _tmp39 = _tmp16 * input_var(0, 1);
  const Scalar _tmp40 = covariance(9, 10) * dt;
  const Scalar _tmp41 = _tmp40 + covariance(3, 10);
  const Scalar _tmp42 = _tmp16 * input_var(1, 1);
  const Scalar _tmp43 = covariance(10, 10) * dt;
  const Scalar _tmp44 = _tmp43 + covariance(4, 10);
  const Scalar _tmp45 = covariance(10, 4) * dt;
  const Scalar _tmp46 = _tmp45 + covariance(4, 4);
  const Scalar _tmp47 = _tmp16 * input_var(2, 1);
  const Scalar _tmp48 = covariance(11, 10) * dt;
  const Scalar _tmp49 = _tmp48 + covariance(5, 10);
  const Scalar _tmp50 = covariance(11, 4) * dt;
  const Scalar _tmp51 = _tmp50 + covariance(5, 4);
  const Scalar _tmp52 = _tmp1 * covariance(9, 11);
  const Scalar _tmp53 = _tmp52 + covariance(0, 11) + covariance(3, 11) * dt;
  const Scalar _tmp54 = _tmp1 * covariance(9, 5) + covariance(0, 5) + covariance(3, 5) * dt;
  const Scalar _tmp55 = _tmp1 * covariance(10, 11);
  const Scalar _tmp56 = _tmp55 + covariance(1, 11) + covariance(4, 11) * dt;
  const Scalar _tmp57 = _tmp1 * covariance(10, 5) + covariance(1, 5) + covariance(4, 5) * dt;
  const Scalar _tmp58 = _tmp1 * covariance(11, 11);
  const Scalar _tmp59 = _tmp58 + covariance(2, 11) + covariance(5, 11) * dt;
  const Scalar _tmp60 = _tmp1 * covariance(11, 5) + covariance(2, 5) + covariance(5, 5) * dt;
  const Scalar _tmp61 = covariance(9, 5) * dt;
  const Scalar _tmp62 = _tmp61 + covariance(3, 5);
  const Scalar _tmp63 = _tmp16 * input_var(0, 2);
  const Scalar _tmp64 = covariance(9, 11) * dt;
  const Scalar _tmp65 = _tmp64 + covariance(3, 11);
  const Scalar _tmp66 = _tmp16 * input_var(1, 2);
  const Scalar _tmp67 = covariance(10, 11) * dt;
  const Scalar _tmp68 = _tmp67 + covariance(4, 11);
  const Scalar _tmp69 = covariance(10, 5) * dt;
  const Scalar _tmp70 = _tmp69 + covariance(4, 5);
  const Scalar _tmp71 = _tmp16 * input_var(2, 2);
  const Scalar _tmp72 = covariance(11, 11) * dt;
  const Scalar _tmp73 = _tmp72 + covariance(5, 11);
  const Scalar _tmp74 = covariance(11, 5) * dt;
  const Scalar _tmp75 = _tmp74 + covariance(5, 5);

  // Output terms (1)
  if (cov_updated != nullptr) {
    Eigen::Matrix<Scalar, 12, 12>& _cov_updated = (*cov_updated);

    _cov_updated(0, 0) = _tmp1 * _tmp4 + _tmp1 * covariance(9, 0) + _tmp2 * dt +
                         _tmp5 * input_var(0, 0) + covariance(0, 0) + covariance(3, 0) * dt;
    _cov_updated(1, 0) = _tmp1 * _tmp8 + _tmp1 * covariance(10, 0) + _tmp5 * input_var(1, 0) +
                         _tmp6 * dt + covariance(1, 0) + covariance(4, 0) * dt;
    _cov_updated(2, 0) = _tmp1 * _tmp11 + _tmp1 * covariance(11, 0) + _tmp5 * input_var(2, 0) +
                         _tmp9 * dt + covariance(2, 0) + covariance(5, 0) * dt;
    _cov_updated(3, 0) =
        _tmp1 * _tmp13 + _tmp15 * dt + _tmp17 + covariance(3, 0) + covariance(9, 0) * dt;
    _cov_updated(4, 0) =
        _tmp1 * _tmp22 + _tmp18 + _tmp20 * dt + covariance(10, 0) * dt + covariance(4, 0);
    _cov_updated(5, 0) =
        _tmp1 * _tmp25 + _tmp23 + _tmp27 * dt + covariance(11, 0) * dt + covariance(5, 0);
    _cov_updated(6, 0) = _tmp1 * covariance(6, 9) + covariance(6, 0) + covariance(6, 3) * dt;
    _cov_updated(7, 0) = _tmp1 * covariance(7, 9) + covariance(7, 0) + covariance(7, 3) * dt;
    _cov_updated(8, 0) = _tmp1 * covariance(8, 9) + covariance(8, 0) + covariance(8, 3) * dt;
    _cov_updated(9, 0) = _tmp14 + _tmp3 + covariance(9, 0);
    _cov_updated(10, 0) = _tmp19 + _tmp7 + covariance(10, 0);
    _cov_updated(11, 0) = _tmp10 + _tmp26 + covariance(11, 0);
    _cov_updated(0, 1) = _tmp1 * _tmp29 + _tmp1 * covariance(9, 1) + _tmp30 * dt +
                         _tmp5 * input_var(0, 1) + covariance(0, 1) + covariance(3, 1) * dt;
    _cov_updated(1, 1) = _tmp1 * _tmp32 + _tmp1 * covariance(10, 1) + _tmp33 * dt +
                         _tmp5 * input_var(1, 1) + covariance(1, 1) + covariance(4, 1) * dt;
    _cov_updated(2, 1) = _tmp1 * _tmp35 + _tmp1 * covariance(11, 1) + _tmp36 * dt +
                         _tmp5 * input_var(2, 1) + covariance(2, 1) + covariance(5, 1) * dt;
    _cov_updated(3, 1) =
        _tmp1 * _tmp41 + _tmp38 * dt + _tmp39 + covariance(3, 1) + covariance(9, 1) * dt;
    _cov_updated(4, 1) =
        _tmp1 * _tmp44 + _tmp42 + _tmp46 * dt + covariance(10, 1) * dt + covariance(4, 1);
    _cov_updated(5, 1) =
        _tmp1 * _tmp49 + _tmp47 + _tmp51 * dt + covariance(11, 1) * dt + covariance(5, 1);
    _cov_updated(6, 1) = _tmp1 * covariance(6, 10) + covariance(6, 1) + covariance(6, 4) * dt;
    _cov_updated(7, 1) = _tmp1 * covariance(7, 10) + covariance(7, 1) + covariance(7, 4) * dt;
    _cov_updated(8, 1) = _tmp1 * covariance(8, 10) + covariance(8, 1) + covariance(8, 4) * dt;
    _cov_updated(9, 1) = _tmp28 + _tmp37 + covariance(9, 1);
    _cov_updated(10, 1) = _tmp31 + _tmp45 + covariance(10, 1);
    _cov_updated(11, 1) = _tmp34 + _tmp50 + covariance(11, 1);
    _cov_updated(0, 2) = _tmp1 * _tmp53 + _tmp1 * covariance(9, 2) + _tmp5 * input_var(0, 2) +
                         _tmp54 * dt + covariance(0, 2) + covariance(3, 2) * dt;
    _cov_updated(1, 2) = _tmp1 * _tmp56 + _tmp1 * covariance(10, 2) + _tmp5 * input_var(1, 2) +
                         _tmp57 * dt + covariance(1, 2) + covariance(4, 2) * dt;
    _cov_updated(2, 2) = _tmp1 * _tmp59 + _tmp1 * covariance(11, 2) + _tmp5 * input_var(2, 2) +
                         _tmp60 * dt + bias_var(0, 0) + covariance(2, 2) + covariance(5, 2) * dt;
    _cov_updated(3, 2) =
        _tmp1 * _tmp65 + _tmp62 * dt + _tmp63 + covariance(3, 2) + covariance(9, 2) * dt;
    _cov_updated(4, 2) =
        _tmp1 * _tmp68 + _tmp66 + _tmp70 * dt + covariance(10, 2) * dt + covariance(4, 2);
    _cov_updated(5, 2) =
        _tmp1 * _tmp73 + _tmp71 + _tmp75 * dt + covariance(11, 2) * dt + covariance(5, 2);
    _cov_updated(6, 2) = _tmp1 * covariance(6, 11) + covariance(6, 2) + covariance(6, 5) * dt;
    _cov_updated(7, 2) = _tmp1 * covariance(7, 11) + covariance(7, 2) + covariance(7, 5) * dt;
    _cov_updated(8, 2) = _tmp1 * covariance(8, 11) + covariance(8, 2) + covariance(8, 5) * dt;
    _cov_updated(9, 2) = _tmp52 + _tmp61 + covariance(9, 2);
    _cov_updated(10, 2) = _tmp55 + _tmp69 + covariance(10, 2);
    _cov_updated(11, 2) = _tmp58 + _tmp74 + covariance(11, 2);
    _cov_updated(0, 3) = _tmp17 + _tmp2 + _tmp4 * dt;
    _cov_updated(1, 3) = _tmp18 + _tmp6 + _tmp8 * dt;
    _cov_updated(2, 3) = _tmp11 * dt + _tmp23 + _tmp9;
    _cov_updated(3, 3) = _tmp0 * input_var(0, 0) + _tmp13 * dt + _tmp15 + acc_var(0, 0);
    _cov_updated(4, 3) = _tmp0 * input_var(1, 0) + _tmp20 + _tmp22 * dt;
    _cov_updated(5, 3) = _tmp0 * input_var(2, 0) + _tmp25 * dt + _tmp27;
    _cov_updated(6, 3) = covariance(6, 3) + covariance(6, 9) * dt;
    _cov_updated(7, 3) = covariance(7, 3) + covariance(7, 9) * dt;
    _cov_updated(8, 3) = covariance(8, 3) + covariance(8, 9) * dt;
    _cov_updated(9, 3) = _tmp12 + covariance(9, 3);
    _cov_updated(10, 3) = _tmp21 + covariance(10, 3);
    _cov_updated(11, 3) = _tmp24 + covariance(11, 3);
    _cov_updated(0, 4) = _tmp29 * dt + _tmp30 + _tmp39;
    _cov_updated(1, 4) = _tmp32 * dt + _tmp33 + _tmp42;
    _cov_updated(2, 4) = _tmp35 * dt + _tmp36 + _tmp47;
    _cov_updated(3, 4) = _tmp0 * input_var(0, 1) + _tmp38 + _tmp41 * dt;
    _cov_updated(4, 4) = _tmp0 * input_var(1, 1) + _tmp44 * dt + _tmp46;
    _cov_updated(5, 4) = _tmp0 * input_var(2, 1) + _tmp49 * dt + _tmp51;
    _cov_updated(6, 4) = covariance(6, 10) * dt + covariance(6, 4);
    _cov_updated(7, 4) = covariance(7, 10) * dt + covariance(7, 4);
    _cov_updated(8, 4) = covariance(8, 10) * dt + covariance(8, 4);
    _cov_updated(9, 4) = _tmp40 + covariance(9, 4);
    _cov_updated(10, 4) = _tmp43 + covariance(10, 4);
    _cov_updated(11, 4) = _tmp48 + covariance(11, 4);
    _cov_updated(0, 5) = _tmp53 * dt + _tmp54 + _tmp63;
    _cov_updated(1, 5) = _tmp56 * dt + _tmp57 + _tmp66;
    _cov_updated(2, 5) = _tmp59 * dt + _tmp60 + _tmp71;
    _cov_updated(3, 5) = _tmp0 * input_var(0, 2) + _tmp62 + _tmp65 * dt;
    _cov_updated(4, 5) = _tmp0 * input_var(1, 2) + _tmp68 * dt + _tmp70;
    _cov_updated(5, 5) = _tmp0 * input_var(2, 2) + _tmp73 * dt + _tmp75;
    _cov_updated(6, 5) = covariance(6, 11) * dt + covariance(6, 5);
    _cov_updated(7, 5) = covariance(7, 11) * dt + covariance(7, 5);
    _cov_updated(8, 5) = covariance(8, 11) * dt + covariance(8, 5);
    _cov_updated(9, 5) = _tmp64 + covariance(9, 5);
    _cov_updated(10, 5) = _tmp67 + covariance(10, 5);
    _cov_updated(11, 5) = _tmp72 + covariance(11, 5);
    _cov_updated(0, 6) = _tmp1 * covariance(9, 6) + covariance(0, 6) + covariance(3, 6) * dt;
    _cov_updated(1, 6) = _tmp1 * covariance(10, 6) + covariance(1, 6) + covariance(4, 6) * dt;
    _cov_updated(2, 6) = _tmp1 * covariance(11, 6) + covariance(2, 6) + covariance(5, 6) * dt;
    _cov_updated(3, 6) = covariance(3, 6) + covariance(9, 6) * dt;
    _cov_updated(4, 6) = covariance(10, 6) * dt + covariance(4, 6);
    _cov_updated(5, 6) = covariance(11, 6) * dt + covariance(5, 6);
    _cov_updated(6, 6) = bias_var(1, 1) + covariance(6, 6);
    _cov_updated(7, 6) = covariance(7, 6);
    _cov_updated(8, 6) = covariance(8, 6);
    _cov_updated(9, 6) = covariance(9, 6);
    _cov_updated(10, 6) = covariance(10, 6);
    _cov_updated(11, 6) = covariance(11, 6);
    _cov_updated(0, 7) = _tmp1 * covariance(9, 7) + covariance(0, 7) + covariance(3, 7) * dt;
    _cov_updated(1, 7) = _tmp1 * covariance(10, 7) + covariance(1, 7) + covariance(4, 7) * dt;
    _cov_updated(2, 7) = _tmp1 * covariance(11, 7) + covariance(2, 7) + covariance(5, 7) * dt;
    _cov_updated(3, 7) = covariance(3, 7) + covariance(9, 7) * dt;
    _cov_updated(4, 7) = covariance(10, 7) * dt + covariance(4, 7);
    _cov_updated(5, 7) = covariance(11, 7) * dt + covariance(5, 7);
    _cov_updated(6, 7) = covariance(6, 7);
    _cov_updated(7, 7) = acc_var(1, 1) + covariance(7, 7);
    _cov_updated(8, 7) = covariance(8, 7);
    _cov_updated(9, 7) = covariance(9, 7);
    _cov_updated(10, 7) = covariance(10, 7);
    _cov_updated(11, 7) = covariance(11, 7);
    _cov_updated(0, 8) = _tmp1 * covariance(9, 8) + covariance(0, 8) + covariance(3, 8) * dt;
    _cov_updated(1, 8) = _tmp1 * covariance(10, 8) + covariance(1, 8) + covariance(4, 8) * dt;
    _cov_updated(2, 8) = _tmp1 * covariance(11, 8) + covariance(2, 8) + covariance(5, 8) * dt;
    _cov_updated(3, 8) = covariance(3, 8) + covariance(9, 8) * dt;
    _cov_updated(4, 8) = covariance(10, 8) * dt + covariance(4, 8);
    _cov_updated(5, 8) = covariance(11, 8) * dt + covariance(5, 8);
    _cov_updated(6, 8) = covariance(6, 8);
    _cov_updated(7, 8) = covariance(7, 8);
    _cov_updated(8, 8) = covariance(8, 8);
    _cov_updated(9, 8) = covariance(9, 8);
    _cov_updated(10, 8) = covariance(10, 8);
    _cov_updated(11, 8) = covariance(11, 8);
    _cov_updated(0, 9) = _tmp4;
    _cov_updated(1, 9) = _tmp8;
    _cov_updated(2, 9) = _tmp11;
    _cov_updated(3, 9) = _tmp13;
    _cov_updated(4, 9) = _tmp22;
    _cov_updated(5, 9) = _tmp25;
    _cov_updated(6, 9) = covariance(6, 9);
    _cov_updated(7, 9) = covariance(7, 9);
    _cov_updated(8, 9) = covariance(8, 9);
    _cov_updated(9, 9) = covariance(9, 9);
    _cov_updated(10, 9) = covariance(10, 9);
    _cov_updated(11, 9) = covariance(11, 9);
    _cov_updated(0, 10) = _tmp29;
    _cov_updated(1, 10) = _tmp32;
    _cov_updated(2, 10) = _tmp35;
    _cov_updated(3, 10) = _tmp41;
    _cov_updated(4, 10) = _tmp44;
    _cov_updated(5, 10) = _tmp49;
    _cov_updated(6, 10) = covariance(6, 10);
    _cov_updated(7, 10) = covariance(7, 10);
    _cov_updated(8, 10) = covariance(8, 10);
    _cov_updated(9, 10) = covariance(9, 10);
    _cov_updated(10, 10) = bias_var(2, 2) + covariance(10, 10);
    _cov_updated(11, 10) = covariance(11, 10);
    _cov_updated(0, 11) = _tmp53;
    _cov_updated(1, 11) = _tmp56;
    _cov_updated(2, 11) = _tmp59;
    _cov_updated(3, 11) = _tmp65;
    _cov_updated(4, 11) = _tmp68;
    _cov_updated(5, 11) = _tmp73;
    _cov_updated(6, 11) = covariance(6, 11);
    _cov_updated(7, 11) = covariance(7, 11);
    _cov_updated(8, 11) = covariance(8, 11);
    _cov_updated(9, 11) = covariance(9, 11);
    _cov_updated(10, 11) = covariance(10, 11);
    _cov_updated(11, 11) = acc_var(2, 2) + covariance(11, 11);
  }
}  // NOLINT(readability/fn_size)

// NOLINTNEXTLINE(readability/fn_size)
}  // namespace sym
